# NOTE: This module is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the module manually.

defmodule HarmonyConnect.Api.Chains do
  @moduledoc """
  API calls for all endpoints tagged `Chains`.
  """

  alias HarmonyConnect.Connection
  import HarmonyConnect.RequestBuilder


  @doc """
  Get Chain Info
  Get information about a specific chain on Connect

  ## Parameters

  - connection (HarmonyConnect.Connection): Connection to server
  - chain_id (String.t): Chain identifier
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %HarmonyConnect.Model.Chain{}} on success
  {:error, info} on failure
  """
  @spec get_chain_by_id(Tesla.Env.client, String.t, keyword()) :: {:ok, HarmonyConnect.Model.Chain.t} | {:error, Tesla.Env.t}
  def get_chain_by_id(connection, chain_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/chains/#{chain_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%HarmonyConnect.Model.Chain{})
  end

  @doc """
  Get All Chains
  Returns all of the chains on factomd.

  ## Parameters

  - connection (HarmonyConnect.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :limit (integer()): The number of items you would like back in each page.
    - :offset (integer()): The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position.
    - :stages (String.t): The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;.
  ## Returns

  {:ok, %HarmonyConnect.Model.ChainList{}} on success
  {:error, info} on failure
  """
  @spec get_chains(Tesla.Env.client, keyword()) :: {:ok, HarmonyConnect.Model.ChainList.t} | {:error, Tesla.Env.t}
  def get_chains(connection, opts \\ []) do
    optional_params = %{
      :limit => :query,
      :offset => :query,
      :stages => :query
    }
    %{}
    |> method(:get)
    |> url("/chains")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%HarmonyConnect.Model.ChainList{})
  end

  @doc """
  Create a Chain
  Create a new chain. Each chain functions as a mini-blockchain such that all of the entries are linked. Every entry relies on data from previous entries in the chain. Any unauthorized alterations to any of these entries can be detected. Be aware that data entered into the &#x60;content&#x60; and &#x60;external_ids&#x60; fields must be in Base64 format. Sending this request will cause Connect to create the first entry of the chain. The data entered into the &#x60;content&#x60; and &#x60;external_id&#x60; fields will be applied to this entry.

  ## Parameters

  - connection (HarmonyConnect.Connection): Connection to server
  - chain_create (ChainCreate): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %HarmonyConnect.Model.ChainShort{}} on success
  {:error, info} on failure
  """
  @spec post_chain(Tesla.Env.client, HarmonyConnect.Model.ChainCreate.t, keyword()) :: {:ok, HarmonyConnect.Model.ChainShort.t} | {:error, Tesla.Env.t}
  def post_chain(connection, chain_create, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/chains")
    |> add_param(:body, :body, chain_create)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%HarmonyConnect.Model.ChainShort{})
  end

  @doc """
  Search Chains
  Finds all of the chains with &#x60;external_ids&#x60; that match what you&#39;ve entered. External IDs must be sent in Base64 format.

  ## Parameters

  - connection (HarmonyConnect.Connection): Connection to server
  - search_body (SearchBody): 
  - opts (KeywordList): [optional] Optional parameters
    - :limit (integer()): The number of items you would like back in each page.
    - :offset (integer()): The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position.
  ## Returns

  {:ok, %HarmonyConnect.Model.ChainList{}} on success
  {:error, info} on failure
  """
  @spec post_chain_search(Tesla.Env.client, HarmonyConnect.Model.SearchBody.t, keyword()) :: {:ok, HarmonyConnect.Model.ChainList.t} | {:error, Tesla.Env.t}
  def post_chain_search(connection, search_body, opts \\ []) do
    optional_params = %{
      :limit => :query,
      :offset => :query
    }
    %{}
    |> method(:post)
    |> url("/chains/search")
    |> add_param(:body, :body, search_body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%HarmonyConnect.Model.ChainList{})
  end
end
