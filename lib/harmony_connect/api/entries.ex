# NOTE: This module is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the module manually.

defmodule HarmonyConnect.Api.Entries do
  @moduledoc """
  API calls for all endpoints tagged `Entries`.
  """

  alias HarmonyConnect.Connection
  import HarmonyConnect.RequestBuilder


  @doc """
  Get Chain&#39;s Entries
  List all entries contained on the specified chain.

  ## Parameters

  - connection (HarmonyConnect.Connection): Connection to server
  - chain_id (String.t): Chain identifier
  - opts (KeywordList): [optional] Optional parameters
    - :limit (integer()): The number of items you would like back in each page.
    - :offset (integer()): The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position.
    - :stages (String.t): The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;.
  ## Returns

  {:ok, %HarmonyConnect.Model.EntryList{}} on success
  {:error, info} on failure
  """
  @spec get_entries_by_chain_id(Tesla.Env.client, String.t, keyword()) :: {:ok, HarmonyConnect.Model.EntryList.t} | {:error, Tesla.Env.t}
  def get_entries_by_chain_id(connection, chain_id, opts \\ []) do
    optional_params = %{
      :limit => :query,
      :offset => :query,
      :stages => :query
    }
    %{}
    |> method(:get)
    |> url("/chains/#{chain_id}/entries")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%HarmonyConnect.Model.EntryList{})
  end

  @doc """
  Get Entry Info
  Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.

  ## Parameters

  - connection (HarmonyConnect.Connection): Connection to server
  - chain_id (String.t): Chain identifier
  - entry_hash (String.t): The SHA256 hash of the entry.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %HarmonyConnect.Model.Entry{}} on success
  {:error, info} on failure
  """
  @spec get_entry_by_hash(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, HarmonyConnect.Model.Entry.t} | {:error, Tesla.Env.t}
  def get_entry_by_hash(connection, chain_id, entry_hash, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/chains/#{chain_id}/entries/#{entry_hash}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%HarmonyConnect.Model.Entry{})
  end

  @doc """
  Get Chain&#39;s First Entry
  Retrieve the first entry that has been saved to this chain.

  ## Parameters

  - connection (HarmonyConnect.Connection): Connection to server
  - chain_id (String.t): Chain identifier
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %HarmonyConnect.Model.Entry{}} on success
  {:error, info} on failure
  """
  @spec get_first_entry(Tesla.Env.client, String.t, keyword()) :: {:ok, HarmonyConnect.Model.Entry.t} | {:error, Tesla.Env.t}
  def get_first_entry(connection, chain_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/chains/#{chain_id}/entries/first")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%HarmonyConnect.Model.Entry{})
  end

  @doc """
  Get Chain&#39;s Last Entry
  Retrieve the last entry that has been saved to this chain.

  ## Parameters

  - connection (HarmonyConnect.Connection): Connection to server
  - chain_id (String.t): Chain identifier
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %HarmonyConnect.Model.Entry{}} on success
  {:error, info} on failure
  """
  @spec get_last_entry(Tesla.Env.client, String.t, keyword()) :: {:ok, HarmonyConnect.Model.Entry.t} | {:error, Tesla.Env.t}
  def get_last_entry(connection, chain_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/chains/#{chain_id}/entries/last")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%HarmonyConnect.Model.Entry{})
  end

  @doc """
  Search Chain&#39;s Entries
  Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.

  ## Parameters

  - connection (HarmonyConnect.Connection): Connection to server
  - chain_id (String.t): Chain identifier
  - search_body (SearchBody): 
  - opts (KeywordList): [optional] Optional parameters
    - :limit (integer()): The number of items you would like back in each page.
    - :offset (integer()): The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position.
  ## Returns

  {:ok, %HarmonyConnect.Model.EntrySearchResponse{}} on success
  {:error, info} on failure
  """
  @spec post_entries_search(Tesla.Env.client, String.t, HarmonyConnect.Model.SearchBody.t, keyword()) :: {:ok, HarmonyConnect.Model.EntrySearchResponse.t} | {:error, Tesla.Env.t}
  def post_entries_search(connection, chain_id, search_body, opts \\ []) do
    optional_params = %{
      :limit => :query,
      :offset => :query
    }
    %{}
    |> method(:post)
    |> url("/chains/#{chain_id}/entries/search")
    |> add_param(:body, :body, search_body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%HarmonyConnect.Model.EntrySearchResponse{})
  end

  @doc """
  Create an Entry
  Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.

  ## Parameters

  - connection (HarmonyConnect.Connection): Connection to server
  - chain_id (String.t): Chain identifier
  - entry_create (EntryCreate): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %HarmonyConnect.Model.EntryShort{}} on success
  {:error, info} on failure
  """
  @spec post_entry_to_chain_id(Tesla.Env.client, String.t, HarmonyConnect.Model.EntryCreate.t, keyword()) :: {:ok, HarmonyConnect.Model.EntryShort.t} | {:error, Tesla.Env.t}
  def post_entry_to_chain_id(connection, chain_id, entry_create, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/chains/#{chain_id}/entries")
    |> add_param(:body, :body, entry_create)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%HarmonyConnect.Model.EntryShort{})
  end
end
